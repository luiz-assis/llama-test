from tabnanny import verbose
from langchain_community.llms import Ollama
from crewai import Agent, Task, Crew, Process
from langsmith import expect


class CrewRunner:
    def run_crew(self, review):
        model = Ollama(model="llama3", base_url="http://localhost:11434")
        classifier_agent = Agent(
            role="sentiment analysis",
            goal="understand if the sentiment of a review is 'positive', 'neutral', 'negative' or 'very negative",
            backstory="you are an AI assistant and will help the owner of the restaurant to know if the review the service is 'positive', 'neutral', 'negative' or 'very negative'",
            verbose=True,
            allow_delegation=False,
            llm=model,
        )

        response_agent = Agent(
            role="response generator",
            goal="generate a apologetic response for the customer when the review is 'negative' or 'very negative', or cumplimentary if otherwise; no more than 300 characters",
            backstory="you are an AI assistant and will help the restaurant owner to write a response to the review, if the review is 'negative' or 'very negative' the response must be apologetic, but don't say that we are going to do anything to regain trust or something like that, just apologize and say we are working to make it better. If the review is 'positive' or 'neutral' the response must be complimentary.",
            verbose=True,
            allow_delegation=False,
            llm=model,
        )

        business_intel_agent = Agent(
            role="perform business intelligence analysis",
            goal=f"analyse the review:{review} and create two lists with the good and bad points informed by the customer, example: 'the food was great, but the service was terrible' = good: 'food', bad: 'service'",
            backstory="you are an AI assistant and will help the restaurant owner to understand the strong and weak points of the service provided by the restaurant",
            verbose=True,
            allow_delegation=False,
            llm=model,
        )

        response_builder_agent = Agent(
            role="response builder",
            goal="build a json object with the fields: 'classification', 'response', 'strong_points' and 'weak_points'",
            backstory="you should act as a api and build a json object with the fields: 'classification', 'response', 'strong_points' and 'weak_points'; the 'classification' field should be the classification of the review done by the 'classifier_agent' (sentiment analysis), the 'response' field should be the response generated by the 'response_agent' agent, the 'strong_points' and 'weak_points' fields should be the lists generated by the 'business_intel_agent' agent",
            verbose=True,
            allow_delegation=False,
            llm=model,
        )

        classify_review_task = Task(
            name="classify review",
            agent=classifier_agent,
            description=f"classify the review: {review} as one of the following: 'positive', 'neutral', 'negative' or 'very negative'",
            expected_output="one of the following string: 'positive', 'neutral', 'negative' or 'very negative'",
        )

        respond_to_review_task = Task(
            description=f"respond to the review: {review} apologizing if the review is 'negative' or 'very negative', or complimentary if otherwise; no more than 300 characters",
            agent=response_agent,
            expected_output="a short and polite response to the review, no more than 300 characters",
        )

        classify_strong_weak_points_task = Task(
            description="The response must be two string lists (good and bad) with the good and bad points informed by the customer, example: 'the food was great, but the service was terrible' = good: 'food', bad: 'service'",
            agent=business_intel_agent,
            expected_output="two string arrays with the good and bad points informed by the customer",
        )

        response_builder_task = Task(
            description="The response must be a json object with the fiels: 'classification', 'response', 'strong_points' and 'weak_points'",
            agent=response_builder_agent,
            expected_output="only a json object with this schema: {'classification':string, 'response':string, 'strong_points':[], 'weak_points':[]}; nothing more",
        )

        crew = Crew(
            agents=[
                classifier_agent,
                response_agent,
                business_intel_agent,
                response_builder_agent,
            ],
            tasks=[
                classify_review_task,
                respond_to_review_task,
                classify_strong_weak_points_task,
                response_builder_task,
            ],
            verbose=2,
            process=Process.sequential,
        )

        output = crew.kickoff()
        return output
